<!DOCTYPE html ><html><head><META http-equiv="Content-Type" content="text/html; charset=utf-8"><meta charset="utf-8"><link rel="shortcut icon" href="../icons/favicon.ico"><link rel="stylesheet" type="text/css" href="../styles/branding.css"><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css"><script type="text/javascript" src="../scripts/branding.js"> </script><title>Breaking Changes Policy</title><meta name="Language" content="en-us"><meta name="Microsoft.Help.Id" content="9c4a6074-9d84-4488-9565-50ecb5049ffe"><meta name="Description" content="To ensure the long-term reliability of both the SDK and applications which rely on the SDK, the following policy is enforced for each release of the SDK."><meta name="Microsoft.Help.ContentType" content="Concepts"><meta name="BrandingAware" content="true"><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css"><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle"><div class="pageHeader" id="PageHeader">openstack.net API Reference Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="362f6481-64dd-4f21-9e71-1d157b5dc745.htm" title="openstack.net API Reference Documentation" tocid="roottoc">openstack.net API Reference Documentation</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="362f6481-64dd-4f21-9e71-1d157b5dc745.htm" title="Welcome" tocid="362f6481-64dd-4f21-9e71-1d157b5dc745">Welcome</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="8b286b82-7aaf-4e45-9ffc-adbd7dbcfaa6.htm" title="License Agreement" tocid="8b286b82-7aaf-4e45-9ffc-adbd7dbcfaa6">License Agreement</a></div><div class="toclevel1 current" data-toclevel="1"><a data-tochassubtree="false" href="9c4a6074-9d84-4488-9565-50ecb5049ffe.htm" title="Breaking Changes Policy" tocid="9c4a6074-9d84-4488-9565-50ecb5049ffe">Breaking Changes Policy</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="32cc6156-3b31-4450-b209-b55fcfc0a210.htm" title="Asynchronous Services" tocid="32cc6156-3b31-4450-b209-b55fcfc0a210">Asynchronous Services</a></div><div class="toclevel1" data-toclevel="1"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="e11545c6-88c9-4ff1-b0cf-abffd4bd3ff7.htm" title="User Guide" tocid="e11545c6-88c9-4ff1-b0cf-abffd4bd3ff7">User Guide</a></div><div class="toclevel1" data-toclevel="1"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="R_Project_API_Reference_Documentation.htm" title="API Reference" tocid="R_Project_API_Reference_Documentation">API Reference</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize"><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize"></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">Breaking Changes Policy</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
        To ensure the long-term reliability of both the SDK and applications which rely on the SDK, the following
        policy is enforced for each release of the SDK.
      </p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png">Scope</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
          This breaking changes policy is only enforced for libraries which explicitly state it as their governing
          policy. In certain cases, a library governed by this breaking changes policy may depend on a library which is
          not governed by the same policy, or which does not provide any breaking changes policy. In those cases, a
          best-effort is provided to ensure changes to the dependency do not affect dependent code. For maximum
          long-term compatibility, dependent applications and libraries should treat dependencies not governed by this
          policy in accordance with the rules described for preliminary features, even though they are not marked as
          such within the documentation.
        </p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png">Definitions</span></div><div id="ID1RBSection" class="collapsibleSection"><dl><dt>Binary compatible</dt><dd><p>
              An assembly <span class="literal">x</span> is <span class="term">binary compatible</span> with an assembly
              <span class="literal">y</span> if replacing <span class="literal">y</span> with <span class="literal">x</span> will not cause an
              application previously compiled against <span class="literal">y</span> to stop functioning at runtime.
            </p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note"> Note</th></tr><tr><td><p>
                Binary compatibility is transitive, but not necessarily symmetric. Specifically, the assembly
                <span class="literal">x</span> may include new APIs that are not included in <span class="literal">y</span>; since the
                application compiled against <span class="literal">y</span> is clearly not using any of these new APIs, they do
                not prevent <span class="literal">x</span> from being binary compatible with <span class="literal">y</span>.
              </p></td></tr></table></div></dd><dt>Source compatible</dt><dd><p>
              An assembly <span class="literal">x</span> is <span class="term">source compatible</span> with an assembly
              <span class="literal">y</span> if replacing <span class="literal">y</span> with <span class="literal">x</span> will not cause an
              application previously compiled against <span class="literal">y</span> to encounter build errors when it is
              recompiled.
            </p></dd><dt>Version</dt><dd><p>
              A <span class="term">version</span> is comprised of four parts, with the following form.
            </p><blockquote>
              major.minor.patch.revision
            </blockquote><p>
              Each part of the version number is an integer in the range 0-65535, inclusive.
            </p></dd><dt>Major release</dt><dd><p>
              A <span class="term">major release</span> is a release which increments the "major" part of the version.
            </p></dd><dt>Minor release</dt><dd><p>
              A <span class="term">minor release</span> is a release which increments the "minor" part of the version, but does
              not change the "major" part.
            </p></dd><dt>Patch release</dt><dd><p>
              A <span class="term">patch release</span> is a release which increments the "patch" and/or "revision" parts of
              the version, but does not change either the "major" or "minor" parts.
            </p></dd><dt>Preliminary feature</dt><dd><p>
              A <span class="term">preliminary feature</span> is a special designation for a publicly-exposed API in the
              library which is exempted from certain rules within the breaking changes policy for the purpose of
              improving the agility of library development without compromising reliability for business users primarily
              interested in API stability.
            </p></dd><dt>Stable feature</dt><dd><p>
              A <span class="term">stable feature</span> is any type or member within the publicly-exposed API of the library
              which is not designated as a preliminary feature.
            </p></dd></dl></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png">Major and Minor Releases</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
          Major and minor releases do not preserve binary compatibility. For dependent assemblies which use a strong
          name, the binary incompatibility is enforced by a change to the strong name of the assembly. Major and minor
          releases update the value of the
          <a href="http://msdn2.microsoft.com/en-us/library/zb298d28" target="_blank">AssemblyVersionAttribute</a> attribute, which
          always changes the strong name of the assembly.
        </p><p>
          Minor releases are typically used for the following.
        </p><ul><li><p>
              Promotion of features previously marked as preliminary to stable features of the API.
            </p></li><li><p>
              Changes to stable features of the API where necessary for the purpose of introducing new functionality,
              addressing performance concerns, or correcting bugs in the library.
            </p></li></ul><p>
          Major releases are typically used for substantial refactoring or other alterations in order to meet the needs
          of a broader user base, or for the purpose of improving overall usability or flexibility of the library.
        </p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png">Patch Releases</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
          Patch releases preserve binary compatibility for all features of the library which are not marked preliminary.
          This includes but is not limited to the following guarantees.
        </p><ul><li><p>
              Patch releases never change the strong name of the assembly. This means a patch release updates the
              <a href="http://msdn2.microsoft.com/en-us/library/zt82d9ex" target="_blank">AssemblyFileVersionAttribute</a> and
              <a href="http://msdn2.microsoft.com/en-us/library/55cfxe86" target="_blank">AssemblyInformationalVersionAttribute</a>
              values, but does not change the
              <a href="http://msdn2.microsoft.com/en-us/library/zb298d28" target="_blank">AssemblyVersionAttribute</a> value.
            </p></li><li><p>
              Patch releases do not change the runtime signature of any type or method which is not marked preliminary.
              The runtime signatures include type and method names
            </p></li><li><p>
              Patch releases may only add elements to the public API of the assembly if they are marked preliminary.
              This rule ensures that patch releases preserve symmetric binary compatibility for applications and
              libraries which avoid the use of any feature marked as preliminary.
            </p></li></ul><h4 class="subHeading">Revision-Only Releases</h4><div class="subsection"><p>
              In some cases, a release will only update the "revision" part of the version. With regard to this breaking
              changes policy, these releases are equivalent to patch releases. In practice, revision-only releases are
              typically reserved for correcting a previous patch or revision release which violated the breaking changes
              policy, or for correcting a bug which was introduced in the current patch cycle without making changes to
              the public API of the assembly.
            </p></div><h4 class="subHeading">Exceptions</h4><div class="subsection"><p>
              Certain exceptions apply to the binary compatibility requirement of patch releases. These include the
              following.
            </p><ul><li><p>
                  All implementation details, i.e. code which is not part of the public API of the assembly, is allowed
                  to change during a patch release. Code using the reflection APIs to manipulate any aspect of the
                  library may observe breaking changes at runtime as a result of changes to implementation details.
                </p></li><li><p>
                  All types and members which are marked as preliminary are exempted from the binary compatibility
                  requirement, subject to the rules of
                  <a href="#PreliminaryFeatures">preliminary features</a>.
                </p></li></ul></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png">Summary of Release Characteristics</span></div><div id="ID4RBSection" class="collapsibleSection"><p>The following table summarizes the intent of various releases.</p><div class="tableSection"><table><tr><th><p>Release Type</p></th><th><p>Binary Compatibility</p></th><th><p>Source Compatibility</p></th><th><p>New Features</p></th></tr><tr><td><p>Major</p></td><td><p>Unrestricted</p></td><td><p>Unrestricted</p></td><td><p>Unrestricted</p></td></tr><tr><td><p>Minor</p></td><td><p>
                Unrestricted<sup>1</sup></p></td><td><p>
                Relaxed Preferred<sup>2</sup></p></td><td><p>Unrestricted</p></td></tr><tr><td><p>Patch</p></td><td><p>Transitive: Required</p><p>
                Symmetric: Preferred<sup>3</sup></p></td><td><p>
                Strict Preferred<sup>4</sup></p></td><td><p>
                Preliminary Only<sup>3</sup></p></td></tr></table></div><ol><li><p>
              Since minor releases result in a change to the strong name of the assembly, binary compatibility is never
              preserved for strong-named applications or libraries which reference the assembly. These cases are rarely
              problematic due to the runtime's support for side-by-side loading of multiple versions of the same
              assembly.
            </p></li><li><p>
              To minimize the cost of updating an application to use a new minor release of the library,
              source-incompatible changes should only be introduced when necessary to support a substantial improvement
              to the library. Eligible improvements include but are not limited to resource utilization, runtime
              performance, or new feature offerings.
            </p></li><li><p>
              Restricting the introduction of features in a patch release to preliminary features provides applications
              the ability to leverage symmetric binary compatibility for maximum runtime reliability, by avoiding the
              use of any feature which is marked as preliminary.
            </p></li><li><p>
              Changes to preliminary features may result in source code incompatibilities due to situations including
              but not limited to conflicts due to ambiguous names. In addition, changing the name of a required
              parameter for the purpose of correcting a spelling error or avoiding confusion is generally allowed due to
              a very low risk of actually causing compilation problems for users. Changes to the names of optional
              parameters, on the other hand, should be avoided whenever possible as users are likely to be referencing
              them directly by name.
            </p></li></ol></div><div class="collapsibleAreaRegion" id="PreliminaryFeatures"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png">Preliminary Features</span></div><div id="ID5RBSection" class="collapsibleSection"><p>
          This library may include types and/or members which are designated as preliminary features. The preliminary
          feature designation is indicated by a clear note at the top of the associated documentation page. In the
          library source code, preliminary features are indicated by including the
          <span class="code">&lt;preliminary/&gt;</span> element to the XML documentation comment for the feature. While
          preliminary features are much more "flexible" during the release cycle of the library, certain rules do apply
          in order to ensure the stronger rules provided for stable features will not be violated by a change to a
          preliminary feature. The following list includes examples of these rules, but other rules may be imposed by
          basic logical constraints. The API elements referred to in the following list are assumed to be restricted to
          the publicly-exposed API of the library. The terms "member" and "members" refer to any method, property, or
          event.
        </p><ul><li><p>
              A member may only refer to a preliminary type in its signature if it is also marked preliminary.
            </p></li><li><p>
              An interface may only include a preliminary member if it is also marked preliminary.
            </p></li><li><p>
              An interface may only extend a preliminary interface if it is also marked preliminary.
            </p></li><li><p>
              A class may only include a preliminary <span class="code">abstract</span> member if either it is also
              marked preliminary, or all constructors for the class are marked <span class="code">internal</span>. This
              restriction also applies to <span class="code">abstract</span> classes which do not implement an
              <span class="code">abstract</span> member declared in a base class.
            </p></li></ul></div></div></div><div id="pageFooter" class="pageFooter"><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:sdk-support%40rackspace.com?Subject=openstack.net API Reference Documentation">sdk-support@rackspace.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>